{"0": {
    "doc": "Classes",
    "title": "Classes",
    "content": "### {{ page.title }} ",
    "url": "https://felleroff.github.io/delafits/pages/classes/",
    "relUrl": "/pages/classes/"
  },"1": {
    "doc": "Compilation",
    "title": "Compilation",
    "content": "### {{ page.title }} The **DeLaFitsDefine** include file contains DeLaFits [compiler directives](https://wiki.freepascal.org/Conditional_compilation). Most of them are defined automatically depending on the toolchain and platform. Others have default values, but you can change them. ### Memory manager DeLaFits uses an intermediate Buffer for reading and writing operations. You can define methods for creating and releasing memory for this Buffer. - {$DELA_MEMORY_SHARED} − all Containers use a share Buffer. This directive will increase the performance of successive operations with a series of Containers and will reduce memory fragmentation. But this case leads to known problems in a multi-threaded application: read and write operations must be synchronized. - {$DELA_MEMORY_PRIVATE} − each Container works with a private Buffer. This directive allows using Container instances on different threads but boosts consumption and memory fragmentation proportion to the number of Container instances. - {$DELA_MEMORY_TEMP} − each Container creates a local Buffer as needed and frees it immediately after use. In this case, memory is used sparingly, is thread-safe, but becomes fragmented and slows the intensive read and write operations. Use this directive when the number of Container instances in the application is limited, or read and write operations are not performed often. {$DELA_MEMORY_SHARED} directive set by default. ### NaN math By default, the {$DELA_MATH_NAN} directive is defined, which allows correctly processing data with [NaN](https://en.wikipedia.org/wiki/NaN) values. It slows down read and write operations. If your dataset does not have NaN values, you can turn off this mode using the {$DELA_MATH_NAN_OFF} directive. ### Pseudorandom number generator To customize a [pseudorandom number generator](https://en.wikipedia.org/wiki/Pseudorandom_number_generator), define the {$DELA_CUSTOM_RANDOM} directive and use the `DeLaFitsMath.SetCustomRandom()` procedure. Useful for unit testing. Turn off by default: DeLaFits uses a generator from the standard library. ### Round render {$DELA_ROUND_RENDER} directive enables the rounding of pixel value when rendering an IMAGE extention. Useful for unit testing. Turn off by default. ",
    "url": "https://felleroff.github.io/delafits/pages/compilation/",
    "relUrl": "/pages/compilation/"
  },"2": {
    "doc": "Constants",
    "title": "Constants",
    "content": "### {{ page.title }} ",
    "url": "https://felleroff.github.io/delafits/pages/constants/",
    "relUrl": "/pages/constants/"
  },"3": {
    "doc": "Design",
    "title": "Design",
    "content": "### {{ page.title }} The entry point to DeLaFits is **TFitsContainer** class from **DeLaFitsClasses** unit. TFitsContainer aggregates and parses a stream with FITS data (TStream class from the standard library). Composite class TFitsContent contains a methods for direct access to the stream object. After successful parsing of the stream, the container contains a list of HDU - objects of TFitsItem class. Each HDU includes the header and data blocks - TFitsItemHead and TFitsItemData classes. ![diagram-classes]({% link assets/images/diagram-classes.png %}) HDU extensions implement in separate units as inheritors of TFitsItem, TFitsItemHead and TFitsItemData classes. To identify an HDU instance as an extension, you must call the `Container.Reclass()` method specifying the extension class. **DeLaFitsImage** unit contains the implementation of the IMAGE extension. ![diagram-classes]({% link assets/images/diagram-image.png %}) **DeLaFitsPicture** unit contains methods for rendering the IMAGE extension data. Composite class TFitsPictureFrames represents IMAGE data as an array of frames. ![diagram-classes]({% link assets/images/diagram-picture.png %}) **EFitsException** (inherited of Exception class) is the base class for all run-time exceptions of DeLaFits. Each DeLaFits exception has `Code` property. ![diagram-classes]({% link assets/images/diagram-exception.png %}) DeLaFits actively uses the [\"Lazy Load\"](https://www.geeksforgeeks.org/lazy-loading-design-pattern/) pattern with a minimum level of caching of stream data. ",
    "url": "https://felleroff.github.io/delafits/pages/design/",
    "relUrl": "/pages/design/"
  },"4": {
    "doc": "Error Codes",
    "title": "Error Codes",
    "content": "### {{ page.title }} **DeLaFitsCommon**, Types, constants, keyword dictionary and simple functions | 1000 | ERROR_FITSThe base constant, minimum value of DeLaFits error codes | 1001 | ERROR_NULL | 1002 | ERROR_UNKNOWN | {: .narrow-first-column } **DeLaFitsString**, String functions for formatting and converting the header cards | 2000 | ERROR_STRING | 2100 | ERROR_STRING_LENGTHString to TCard error converting: input string length less than 80 characters | 2110 | ERROR_STRING_BOOLEANString to Boolean error converting: string can only contain \"T\" or \"F\" values | 2120 | ERROR_STRING_BITPIXString to TBitPix error converting: string can contain only values of {\"-64\", \"-32\", \"8\", \"16\", \"32\", \"64\"} | 2130 | ERROR_STRING_INTEGERString to Integer error converting | 2140 | ERROR_STRING_FLOATString to Float error converting | 2150 | ERROR_STRING_PARSEThe Line splitting error | 2160 | ERROR_STRING_DATETIMEString to TDateTime error converting | 2170 | ERROR_STRING_COORDString to {% suphelp equatorial coordinates ? Right Ascension or Declination %} error converting: string must be in an hour `HH:MM:SS.(S)` or degree `±DD:MM:SS.(S) `format | 2180 | ERROR_STRING_RAIncorrect Right Ascension value: RA ∈ [0°.0 .. 360°.0) or [0h.0 .. 24h.0) | 2190 | ERROR_STRING_DEIncorrect Declination value: DEC ∈ (-90°.0 .. +90°.0) | {: .narrow-first-column } **DeLaFitsMath**, Mathematics functions | 3000 | ERROR_MATH | 3100 | ERROR_MATH_NANPICTUREYou can override NaN with a value other than NaN | 3200 | ERROR_MATH_MATRIX_SHIFTIncorrect Shift value to create an affine transformations matrix: (dX, dY) ∉ {±Infinity, NaN} | 3201 | ERROR_MATH_MATRIX_SCALEIncorrect Scale value to create an affine transformations matrix: (sX, sY) ∉ {0.0, ±Infinity, NaN} | 3202 | ERROR_MATH_MATRIX_ROTATEIncorrect Rotate value to create an affine transformations matrix: Angle ∉ {±Infinity, NaN} | 3203 | ERROR_MATH_MATRIX_SHEARXIncorrect ShearX value to create an affine transformations matrix: Angle ∈ (-90°.0 .. +90°.0) | 3204 | ERROR_MATH_MATRIX_SHEARYIncorrect ShearY value to create an affine transformations matrix: Angle ∈ (-90°.0 .. +90°.0) | 3205 | ERROR_MATH_MATRIX_ZTERMWrong Z-term in affine transformations matrix: Z-term ≡ (0, 0, 1) | 3206 | ERROR_MATH_MATRIX_DETWrong Determinant of the affine transformations matrix: det ≠ 0 | {: .narrow-first-column } **DeLaFitsClasses**, Container of Head and Data Units | 4000 | ERROR_CLASSES | 4100 | ERROR_ITEM_HEAD_BIND_ASSIGN | 4101 | ERROR_ITEM_HEAD_BIND_INSPECT | 4102 | ERROR_ITEM_HEAD_MAKE_SIZE_SMALL | 4103 | ERROR_ITEM_HEAD_MAKE_SIZE_MULTIPLE | 4104 | ERROR_ITEM_HEAD_MAKE_SIMPLE_PARSE | 4105 | ERROR_ITEM_HEAD_MAKE_SIMPLE_KEY | 4106 | ERROR_ITEM_HEAD_MAKE_SIMPLE_VALUE | 4107 | ERROR_ITEM_HEAD_MAKE_XTENSION_PARSE | 4108 | ERROR_ITEM_HEAD_MAKE_XTENSION_KEY | 4109 | ERROR_ITEM_HEAD_MAKE_XTENSION_VALUE | 4110 | ERROR_ITEM_HEAD_MAKE_KEYEND_NOTFOUND | 4111 | ERROR_ITEM_HEAD_GET_KEYWORD_INDEX | 4112 | ERROR_ITEM_HEAD_SET_KEYWORD_INDEX | 4113 | ERROR_ITEM_HEAD_CAST_CARD | 4114 | ERROR_ITEM_HEAD_CAST_LINE | 4115 | ERROR_ITEM_HEAD_READ_INDEX | 4116 | ERROR_ITEM_HEAD_READ_COUNT | 4117 | ERROR_ITEM_HEAD_WRITE_INDEX | 4118 | ERROR_ITEM_HEAD_WRITE_COUNT | 4119 | ERROR_ITEM_HEAD_INSERT_INDEX | 4120 | ERROR_ITEM_HEAD_DELETE_INDEX | 4121 | ERROR_ITEM_HEAD_DELETE_COUNT | 4122 | ERROR_ITEM_HEAD_EXCHANGE_INDEX | 4123 | ERROR_ITEM_HEAD_MOVE_INDEX | 4124 | ERROR_ITEM_HEAD_FREE_INSPECT | 4200 | ERROR_ITEM_DATA_BIND_ASSIGN | 4201 | ERROR_ITEM_DATA_BIND_INSPECT | 4202 | ERROR_ITEM_DATA_BIND_NOHEAD | 4203 | ERROR_ITEM_DATA_MAKE_SIZE | 4204 | ERROR_ITEM_DATA_READ_BOUNDS | 4205 | ERROR_ITEM_DATA_WRITE_BOUNDS | 4206 | ERROR_ITEM_DATA_ERASE_BOUNDS | 4207 | ERROR_ITEM_DATA_DELETE_BOUNDS | 4208 | ERROR_ITEM_DATA_TRUNCATE_SIZE | 4209 | ERROR_ITEM_DATA_ERASE_UFSSET | 4210 | ERROR_ITEM_DATA_ERASE_SIZE | 4211 | ERROR_ITEM_DATA_ADD_SIZE | 4212 | ERROR_ITEM_DATA_FREE_INSPECT | 4300 | ERROR_ITEM_BIND_ASSIGN | 4301 | ERROR_ITEM_BIND_INSPECT | 4302 | ERROR_ITEM_GETBITPIX_NOHEAD | 4303 | ERROR_ITEM_GETBITPIX_NOTFOUND | 4304 | ERROR_ITEM_GETBITPIX_INVALID | 4305 | ERROR_ITEM_GETBITPIX_INCORRECT | 4306 | ERROR_ITEM_GETGCOUNT_NOHEAD | 4307 | ERROR_ITEM_GETGCOUNT_INVALID | 4308 | ERROR_ITEM_GETGCOUNT_INCORRECT | 4309 | ERROR_ITEM_GETPCOUNT_NOHEAD | 4310 | ERROR_ITEM_GETPCOUNT_INVALID | 4311 | ERROR_ITEM_GETPCOUNT_INCORRECT | 4312 | ERROR_ITEM_GETNAXIS_NOHEAD | 4313 | ERROR_ITEM_GETNAXIS_NOTFOUND | 4314 | ERROR_ITEM_GETNAXIS_INVALID | 4315 | ERROR_ITEM_GETNAXIS_INCORRECT | 4316 | ERROR_ITEM_GETNAXES_NOHEAD | 4317 | ERROR_ITEM_GETNAXES_NUMBER | 4318 | ERROR_ITEM_GETNAXES_NOTFOUND | 4319 | ERROR_ITEM_GETNAXES_INVALID | 4320 | ERROR_ITEM_GETNAXES_INCORRECT | 4321 | ERROR_ITEM_FREE_INSPECT | 4400 | ERROR_CONTENT_ASSIGN_STREAM | 4401 | ERROR_CONTENT_READ | 4402 | ERROR_CONTENT_READ_BUFFER | 4403 | ERROR_CONTENT_WRITE | 4404 | ERROR_CONTENT_WRITE_BUFFER | 4405 | ERROR_CONTENT_FILL_BOUNDS | 4406 | ERROR_CONTENT_SHIFT_BOUNDS | 4407 | ERROR_CONTENT_SHIFT_SIZE | 4408 | ERROR_CONTENT_ROTATE_BOUNDS | 4409 | ERROR_CONTENT_ROTATE_SIZE | 4410 | ERROR_CONTENT_EXCHANGE_BOUNDS | 4411 | ERROR_CONTENT_EXCHANGE_SIZE | 4412 | ERROR_CONTENT_EXCHANGE_INTER | 4413 | ERROR_CONTENT_MOVE_BOUNDS | 4414 | ERROR_CONTENT_MOVE_SIZE | 4415 | ERROR_CONTENT_MOVE_INTER | 4416 | ERROR_CONTENT_RESIZE_BOUNDS | 4417 | ERROR_CONTENT_RESIZE_SIZE | 4500 | ERROR_CONTAINER_GETITEM_INDEX | 4501 | ERROR_CONTAINER_INSERT_INDEX | 4502 | ERROR_CONTAINER_RECLASS_INDEX | 4503 | ERROR_CONTAINER_DELETE_INDEX | 4504 | ERROR_CONTAINER_DELETE_REORDER | 4505 | ERROR_CONTAINER_EXCHANGE_INDEX | 4506 | ERROR_CONTAINER_EXCHANGE_REORDER | 4507 | ERROR_CONTAINER_MOVE_INDEX | 4508 | ERROR_CONTAINER_MOVE_REORDER | {: .narrow-first-column } **DeLaFitsImage**, Standard IMAGE extension | 5000 | ERROR_IMAGE | 5100 | ERROR_IMAGE_SPEC_INVALID | 5101 | ERROR_IMAGE_SPEC_BITBIX | 5102 | ERROR_IMAGE_SPEC_NAXIS | 5103 | ERROR_IMAGE_SPEC_NAXES | 5104 | ERROR_IMAGE_SPEC_NUMBER | 5105 | ERROR_IMAGE_SPEC_BSCALE | 5106 | ERROR_IMAGE_SPEC_BZERO | 5107 | ERROR_IMAGE_SPEC_ITEM | 5200 | ERROR_IMAGE_HEAD_INCORRECT_NAME | 5201 | ERROR_IMAGE_HEAD_INCORRECT_NAXISN | 5300 | ERROR_IMAGE_DATA_GETELEMS_INDEX | 5301 | ERROR_IMAGE_DATA_SETELEMS_INDEX | 5302 | ERROR_IMAGE_DATA_ALLOWREAD_INDEX | 5303 | ERROR_IMAGE_DATA_ALLOWREAD_COUNT | 5304 | ERROR_IMAGE_DATA_ALLOWREAD_LENGTH | 5305 | ERROR_IMAGE_DATA_ALLOWWRITE_INDEX | 5306 | ERROR_IMAGE_DATA_ALLOWWRITE_COUNT | 5307 | ERROR_IMAGE_DATA_ALLOWWRITE_LENGTH | {: .narrow-first-column } **DeLaFitsPicture**, Standard IMAGE extension: data visualization | 6000 | ERROR_PICTURE | 6100 | ERROR_PICTURE_SPEC_INVALID | 6101 | ERROR_PICTURE_SPEC_NAXIS | 6200 | ERROR_PICTURE_HEAD_INCORRECT_NAXIS | 6300 | ERROR_PICTURE_BINDING_BIND_ASSIGN | 6301 | ERROR_PICTURE_BINDING_BIND_INSPECT | 6302 | ERROR_PICTURE_BINDING_FREE_INSPECT | 6400 | ERROR_PICTURE_HISTOGRAM_INCORRECT_RANGE | 6401 | ERROR_PICTURE_HISTOGRAM_GETBUCKET_INDEX | 6500 | ERROR_PICTURE_TONE_INCORRECT_BRIGHTNESS | 6501 | ERROR_PICTURE_TONE_INCORRECT_CONTRAST | 6502 | ERROR_PICTURE_TONE_INCORRECT_GAMMA | 6600 | ERROR_PICTURE_PALETTE_INVALID_TUPLES | 6700 | ERROR_PICTURE_FRAME_BIND_ASSIGN | 6701 | ERROR_PICTURE_FRAME_BIND_INSPECT | 6702 | ERROR_PICTURE_FRAME_BIND_INDEX | 6703 | ERROR_PICTURE_FRAME_FREE_INSPECT | 6704 | ERROR_PICTURE_FRAME_INCORRECT_SCENE | 6705 | ERROR_PICTURE_FRAME_INCORRECT_PIXMAP | 6706 | ERROR_PICTURE_FRAME_INCORRECT_BITMAP | 6800 | ERROR_PICTURE_FRAMES_BIND_ASSIGN | 6801 | ERROR_PICTURE_FRAMES_BIND_INSPECT | 6802 | ERROR_PICTURE_FRAMES_FREE_INSPECT | 6803 | ERROR_PICTURE_FRAMES_GETFRAME_INDEX | {: .narrow-first-column } ",
    "url": "https://felleroff.github.io/delafits/pages/errorcodes/",
    "relUrl": "/pages/errorcodes/"
  },"5": {
    "doc": "Functions",
    "title": "Functions",
    "content": "### {{ page.title }} ",
    "url": "https://felleroff.github.io/delafits/pages/functions/",
    "relUrl": "/pages/functions/"
  },"6": {
    "doc": "Get Started",
    "title": "Get Started",
    "content": "### {{ page.title }} [Overall FITS structure]({{ site.fits.standard }}#page=10). FITS is an HDU list. Each HDU consists of a header and data block. A header is a collection of 80-character ASCII strings as \"keyword-value-note\" type records. A data block is a byte stream in big-endian order with a specification in a header. To integrate with the project, add the `source` library directory to the search path. ### Example \\#1 - Edit HDU Edit a header and data of the HDU without considering its extension specification. 1. Include a reference to **DeLaFitsCommon** and **DeLaFitsClasses** units in your project 2. Create the stream with data in FITS format: open a file ```pascal Stream := TFileStream.Create('demo-image.fits', fmOpenReadWrite); ``` 3. Parse the stream: create a FITS container. A container object will contain the HDU list ```pascal Container := TFitsContainer.Create(Stream); for I := 0 to Container.Count - 1 do HDU := Container.Items[I]; ``` 4. Get the header of the selected HDU. A header object is a list of \"keyword-value-note\" records ```pascal Head := HDU.Head; for I := 0 to Head.Count - 1 do begin Key := Head.Keywords[I]; Valu := Head.ValuesInteger[I]; Note := Head.Notes[I]; end; ``` 5. Edit or insert a new header value ```pascal Index := Head.IndexOf('DATE-OBS'); if Index < 0 then Head.AddDateTime('DATE-OBS', Now, 'Add datetime') else Head.ValuesDateTime[Index] := Now; ``` 6. Get the data object of the selected HDU. Usable data size less than or equal to real ```pascal Data := HDU.Data; Cize := Data.Cize; // useful data size Size := Data.Size; // real data size ``` 7. Read and edit a data block as a byte stream ```pascal var Chunk: array of Byte; ... SetLength(Chunk, Cize div 1000); Data.Read(0, Length(Chunk), Chunk[0]); Chunk[0] := 255; Chunk[1] := 255; Data.Write(0, Length(Chunk), Chunk[0]); ``` 8. Release resources ```pascal Container.Free; Stream.Free; ``` ### Example \\#2 - Edit IMAGE Edit the physical values of the IMAGE extension data. 1. Include a reference to **DeLaFitsCommon**, **DeLaFitsClasses** and **DeLaFitsImage** units in your project 2. Create the FITS container: open and parse a file ```pascal Stream := TFileStream.Create('demo-image.fits', fmOpenReadWrite); Container := TFitsContainer.Create(Stream); ``` 3. Cast the HDU as an IMAGE extension ```pascal HDU := Container.Items[Index]; if HDU.Name = 'IMAGE' then Image := HDU.Reclass(TFitsImage) as TFitsImage; ``` 4. Get the data object of the IMAGE ```pascal Data := Image.Data; Size := Data.Size; // real data size Cize := Data.Cize; // useful data size Count := Data.Count; // pixels count in a usable data block ``` 5. Read and edit a data block as a sequence of pixels (physical values) ```pascal var Chunk: array of Double; ... SetLength(Chunk, Count div 1000); Data.ReadElems(0, Length(Chunk), TA64f(Chunk)); Chunk[0] := Chunk[0] / 2; Chunk[1] := Chunk[1] / 2; Data.WriteElems(0, Length(Chunk), TA64f(Chunk)); ``` 6. Release resources ```pascal Container.Free; Stream.Free; ``` ### Example \\#3 - Create IMAGE Add a new instance of the IMAGE extension to the FITS container. 1. Include a reference to **DeLaFitsCommon**, **DeLaFitsClasses** and **DeLaFitsImage** units in your project 2. Create a new file with empty the FITS container ```pascal Stream := TFileStream.Create('new-image.fits', fmCreate); Container := TFitsContainer.Create(Stream); ``` 3. Create a spec of a new IMAGE instance: set BITPIX and dataset size ```pascal Spec := TFitsImageSpec.Create(bi16c, [1000, 2000]); ``` 4. Add a new instance of IMAGE ```pascal Image := Container.Add(TFitsImage, Spec) as TFitsImage; ``` 5. Edit a header and data of the new IMAGE instance ```pascal Head := Image.Head; Data := Image.Data; ``` 6. Release resources ```pascal Spec.Free; Container.Free; Stream.Free; ``` ### Example \\#4 - Render IMAGE Create a Bitmap from the data region of the IMAGE extension. 1. Include a reference to **DeLaFitsCommon**, **DeLaFitsClasses** and **DeLaFitsPicture** units in your project 2. Create the FITS container: open and parse a file ```pascal Stream := TFileStream.Create('demo-image.fits', fmOpenReadWrite); Container := TFitsContainer.Create(Stream); ``` 3. Cast some HDU as a Picture of the IMAGE extension ```pascal for I := 0 to Container.Count - 1 do Picture := Container.Reclass(I, TFitsPicture) as TFitsPicture; ``` 4. Get the Frame object of the Picture. The Frame is a two-dimensional array of `NAXIS1 x NAXIS2` elements from IMAGE data ```pascal for I := 0 to Picture.Frames.Count - 1 do Frame := Picture.Frames[I]; ``` 5. Set a Frame region to render ```pascal Region := ToRegion(0, 0, Frame.SceneWidth div 2, Frame.SceneHeight div 2); ``` 6. Create a new Bitmap and render the Frame region ```pascal Bitmap := TBitmap.Create; Frame.RenderScene(Bitmap, Region); ``` 7. Release resources ```pascal Bitmap.Free; Container.Free; Stream.Free; ``` ",
    "url": "https://felleroff.github.io/delafits/pages/getstarted/",
    "relUrl": "/pages/getstarted/"
  },"7": {
    "doc": "Overview",
    "title": "Overview",
    "content": "### What is DeLaFits? [![Delhi]({% link {{ page.delphi.logo }} %})]({{ page.delphi.website }}) [![Lazarus]({% link {{ page.lazarus.logo }} %})]({{ page.lazarus.website }}) [![FITS]({% link {{ site.fits.logo }} %})]({{ site.fits.website }}) DeLaFits is a native [Delphi]({{ page.delphi.website }}) and [Lazarus]({{ page.lazarus.website }}) class library for operation with files in the [FITS]({{ site.fits.website }}) format. DeLaFits supported: - reading, editing and building the [HDU]({{ site.fits.standard }}#page=10 \"Header and Data Units\") - high-level access to [Standard Extensions]({{ site.fits.standard }}#page=24) - data rendering of the [IMAGE extension]({{ site.fits.standard }}#page=24) ### How to use? To use DeLaFits, just add the library `source` directory to your project’s [search path](https://wiki.freepascal.org/IDE_Window:_Compiler_Options#Other_Unit_Files). Basic DeLaFits API is in units: - DeLaFitsCommon: types, constants, keyword dictionary and simple functions - DeLaFitsClasses: container of header and data units ### Summary {% assign sorted_pages = site.pages | sort: \"nav_order\" %} {% for p in sorted_pages %} {% if p.summary %} {% unless p.parent %} - [{{ p.title }}]({{ p.url | relative_url }}) topic describes the {{ p.summary }} {% endunless %} {% endif %} {% endfor %} ### Testing [![Delhi]({% link {{ page.delphi.logo }} %})]({{ page.delphi.website }}) [![Lazarus]({% link {{ page.lazarus.logo }} %})]({{ page.lazarus.website }}) [![Windows]({% link {{ page.windows.logo }} %})]({{ page.windows.website }}) [![Linux Mint]({% link {{ page.linuxmint.logo }} %})]({{ page.linuxmint.website }}) DeLaFits tested in Delphi 7/2010/10.3 and Lazarus 1.8.4/2.0.12 Based on 32- and 64-bits operating systems: Windows 10 and Linux Mint 19.3/20.2 ",
    "url": "https://felleroff.github.io/delafits/",
    "relUrl": "/"
  },"8": {
    "doc": "Issues",
    "title": "Issues",
    "content": "### {{ page.title }} ",
    "url": "https://felleroff.github.io/delafits/pages/issues/",
    "relUrl": "/pages/issues/"
  },"9": {
    "doc": "TArray",
    "title": "TArray",
    "content": "### {{ page.title }} **Unit** DeLaFitsCommon **Type** type ```pascal T08u = Byte; T08c = ShortInt; T16u = Word; T16c = SmallInt; T32f = Single; T32u = LongWord; T32c = LongInt; T64f = Double; T64c = Int64; T80f = Extended; TA08u = array of T08u; TA08c = array of T08c; TA16u = array of T16u; TA16c = array of T16c; TA32f = array of T32f; TA32u = array of T32u; TA32c = array of T32c; TA64f = array of T64f; TA64c = array of T64c; TA80f = array of T80f; ``` **Description** DeLaFits declares synonyms for standard integer and real types. Synonym name format: `character \"T\" + byte count + representation`. Representation of numbers: - f - floating-point - u - unsigned binary integer - c - two's complement binary integer Methods for reading and writing data use dynamic array types of numbers, but DeLaFits does not bind your project to the use of these types. Use explicit typecasting in data access methods. ```pascal var Chunk: array of Double; ... SetLength(Elems, CountElems); Image.Data.ReadElems(IndexElems, CountElems, TA64f(Elems)); ``` **See Also** [Get Started, Example #2]({% link pages/getstarted.md %}#example-2---edit-image) ",
    "url": "https://felleroff.github.io/delafits/pages/types/tarray/",
    "relUrl": "/pages/types/tarray/"
  },"10": {
    "doc": "TBitPix",
    "title": "TBitPix",
    "content": "### {{ page.title }} **Unit** DeLaFitsCommon **Type** type ```pascal TBitPix = (biUnknown, bi64f, bi32f, bi08u, bi16c, bi32c, bi64c); ``` **Description** > BITPIX keyword. The value field shall contain an integer. The absolute value is used in computing the sizes of data structures. It shall specify the number of bits that represent a data value in the associated data array > [The FITS Standard, Sect. 4.4.1]({{ site.fits.standard }}#page=17) The bit depth of data values. Specifies the number of bits that represent a data value. Value is determined by BITPIX and accepts one of standard types: - `bi64f` ~ BITPIX = -64 - IEEE double precision floating-point - `bi32f` ~ BITPIX = -32 - IEEE single precision floating-point - `bi08u` ~ BITPIX = 8 - Character or unsigned binary integer - `bi16c` ~ BITPIX = 16 - 16-bit two's complement binary integer - `bi32c` ~ BITPIX = 32 - 32-bit two's complement binary integer - `bi64c` ~ BITPIX = 64 - 64-bit two's complement binary integer ",
    "url": "https://felleroff.github.io/delafits/pages/types/tbitpix/",
    "relUrl": "/pages/types/tbitpix/"
  },"11": {
    "doc": "TFmtMeaCoord",
    "title": "TFmtMeaCoord",
    "content": "### {{ page.title }} **Unit** DeLaFitsCommon **Type** type ```pascal TFmtMeaCoord = (coDegree, coHour); ``` **Description** The format of Right Ascension: degrees [0.0 .. 360.0) or hours [0.0 .. 24.0) - `coDegree` is a degree measure `DDD:MM:SS.(s)`, e.g. 123°45'56\".7 - `coHour` is an hour measure: `HH:MM:SS.(s)`, e.g. 12h23m45s.6 **See Also** [TFmtRepCoord]({% link pages/types/tfmtrepcoord.md %}) ",
    "url": "https://felleroff.github.io/delafits/pages/types/tfmtmeacoord/",
    "relUrl": "/pages/types/tfmtmeacoord/"
  },"12": {
    "doc": "TFmtRepCoord",
    "title": "TFmtRepCoord",
    "content": "### {{ page.title }} **Unit** DeLaFitsCommon **Type** type ```pascal TFmtRepCoord = (coWhole, coParts); ``` **Description** The text representation of Right Ascension and Declination: decimal view as float-number or hexadecimal view as separate parts - `coWhole` is decimal view `G.(g)`, e.g., 12.3456 degrees or hours - `coParts` is hexadecimal view `GG MM SS.(s)`, e.g., 12°34’56”.7 for Declination, and 12°34’56”.7 or 12h34m56s.7 for Right ascension **See Also** [TFmtMeaCoord]({% link pages/types/tfmtmeacoord.md %}) ",
    "url": "https://felleroff.github.io/delafits/pages/types/tfmtrepcoord/",
    "relUrl": "/pages/types/tfmtrepcoord/"
  },"13": {
    "doc": "TFormatLine",
    "title": "TFormatLine",
    "content": "### {{ page.title }} **Unit** DeLaFitsCommon **Type** type ```pascal PFormatLine = ^TFormatLine; TFormatLine = record vaStr: record wWidth: ShortInt; wWidthQuoteInside: ShortInt; end; vaBol: record wWidth: ShortInt; end; vaInt: record wWidth: ShortInt; wSign: Boolean; wFmt: string; end; vaFloat: record wWidth: ShortInt; wSign: Boolean; wFmt: string; end; vaDateTime: record rFmtShortDate: TFmtShortDate; wWidth: ShortInt; wWidthQuoteInside: ShortInt; end; vaCoord: record rFmtMeaRa: TFmtMeaCoord; wWidth: ShortInt; wWidthQuoteInside: ShortInt; wPrecRa: Word; wPrecDe: Word; wFmtMeaRa: TFmtMeaCoord; wFmtRepCoord: TFmtRepCoord; end; end; ``` **Description** > Each 80-character header keyword record shall consist of a keyword name, a value indicator (only required if a value is present), an optional value, and an optional comment > [The FITS Standard, Sect. 4.1.1]({{ site.fits.standard }}#page=12) Parameters for parsing and composing a header {% suphelp lines ? 80-character header keyword record %}. Format of Date, Time, {% suphelp Coordinates ? Right Ascension or Declination %}, and text representation. String value - `vaStr.wWidth` - compose parameter, the minimum number of text characters, by default `-20` ```pascal vaStr.wWidth := -5 -> compose('text') = 'text ' vaStr.wWidth := 5 -> compose('text') = ' text' ``` - `vaStr.wWidthQuoteInside` - compose parameter, the minimum number of quoted text characters, by default `-8` ```pascal vaStr.wWidthQuoteInside := -5 -> compose('text') := '\"text \"' vaStr.wWidthQuoteInside := 5 -> compose('text') := '\" text\"' ``` Boolean value - `vaBol.wWidth` - compose parameter, the minimum number of text characters, by default `20` ```pascal vaBol.wWidth := -5 -> compose(True) = 'T ' vaBol.wWidth := 5 -> compose(True) = ' T' ``` Integer value - `vaInt.wWidth` - compose parameter, the minimum number of text characters, by default `20` - `vaInt.wSign` - compose parameter, include a number sign in the text, by default `False` ```pascal vaInt.wSign := True -> compose(5) = '+5' vaInt.wSign := False -> compose(5) = '5' ``` - `vaInt.wFmt` - compose parameter, arguments a [Format function][PascalFormat], by default `%d` Float value - `vaFloat.wWidth` - compose parameter, the minimum number of text characters, by default `20` - `vaFloat.wSign` - compose parameter, include a number sign in the text, by default `False` - `vaFloat.wFmt` - compose parameter, arguments a [Format function][PascalFormat], by default `%g` DataTime value - `vaDateTime.rFmtShortDate` - parse parameter, short date format: `YY-MM-DD` or `DD-MM-YY`, by default `yymmdd` ```pascal vaDateTime.rFmtShortDate := yymmdd -> parse('10.11.12') = 1910 year 11 month 12 day vaDateTime.rFmtShortDate := ddmmyy -> parse('10.11.12') = 1912 year 11 month 10 day ``` - `vaDateTime.wWidth` - compose parameter, the minimum number of text characters, by default `-20` - `vaDateTime.wWidthQuoteInside` - compose parameter, the minimum number of quoted text characters, by default `-8` Coordinates value - [`vaCoord.rFmtMeaRa`][TFmtMeaCoord] - parse parameter, the format of Right Ascension: degrees or hours, by default `coHour` ```pascal vaCoord.rFmtMeaRa := coDegree -> parse('12.3456') = 12 degrees 20 minutes 44.2 seconds vaCoord.rFmtMeaRa := coHour -> parse('12.3456') = 12 hours 20 minutes 44.16 seconds ``` - `vaCoord.wWidth` - compose parameter, the minimum number of text characters, by default `-20` - `vaCoord.wWidthQuoteInside` - compose parameter, the minimum number of quoted text characters, by default `-8` - `vaCoord.wPrecRa` - compose parameter, the precision of the textual representation of Right Ascension, the number of digits after the decimal point in degree, by default `4` ~ 1 seconds in degree - `vaCoord.wPrecDe` - compose parameter, the precision of the textual representation of Declination, the number of digits after the decimal point in degree, by default `4` ~ 1 seconds in degree - [`vaCoord.wFmtMeaRa`][TFmtMeaCoord] - compose parameter, the format of Right Ascension: degrees or hours, by default `coHour` ```pascal vaCoord.wFmtMeaRa := coDegree -> compose(12.3456) = '12:20:44.2' in degrees vaCoord.wFmtMeaRa := coHour -> compose(12.3456) = '12:20:44.16' in hours ``` - [`vaCoord.wFmtRepCoord`][TFmtRepCoord] - compose parameter, the text representation of Right Ascension and Declination: decimal or hexadecimal, by defaul `coParts` ```pascal // Right Ascension vaCoord.wFmtRepCoord := coWhole -> compose(12.3456 degrees) = '12.3456' in degree vaCoord.wFmtRepCoord := coParts -> compose(12.3456 degrees) = '12:20:44.16' in degree // Declination vaCoord.wFmtRepCoord := coWhole -> compose(12.3456 degrees) = '12.3456' in degree vaCoord.wFmtRepCoord := coParts -> compose(12.3456 degrees) = '+12:20:44.16' in degree ``` **See Also** [TFmtMeaCoord][TFmtMeaCoord] [TFmtRepCoord][TFmtRepCoord] [PascalFormat]: https://wiki.freepascal.org/Format_function [TFmtMeaCoord]: {% link pages/types/tfmtmeacoord.md %} [TFmtRepCoord]: {% link pages/types/tfmtrepcoord.md %} ",
    "url": "https://felleroff.github.io/delafits/pages/types/tformatline/",
    "relUrl": "/pages/types/tformatline/"
  },"14": {
    "doc": "Types",
    "title": "Types",
    "content": "### {{ page.title }} | name | description |:---------------------------- |:------------------------------------------------------------------------------------------------------------------------------- | [PFormatLine][TFormatLine] | Pointer to [TFormatLine][TFormatLine] type | PHistogramBucket | Pointer to THistogramBucket type | PPaletteTuples | Pointer to TPaletteTuples type | [TA08c][TArray] | A one-dimensional dynamic array ShortInt | [TA08u][TArray] | A one-dimensional dynamic array Byte | [TA16c][TArray] | A one-dimensional dynamic array SmallInt | [TA16u][TArray] | A one-dimensional dynamic array Word | [TA32c][TArray] | A one-dimensional dynamic array LongInt | [TA32f][TArray] | A one-dimensional dynamic array Single | [TA32u][TArray] | A one-dimensional dynamic array LongWord | [TA64c][TArray] | A one-dimensional dynamic array Int64 | [TA64f][TArray] | A one-dimensional dynamic array Double | [TA80f][TArray] | A one-dimensional dynamic array Extended | [TBitPix][TBitPix] | The [bit depth]({{ site.fits.standard }}#page=17) of data values | TBound | A Record, [isothetical](https://en.wikipedia.org/wiki/Isothetic_polygon) rectangle defined by minimum and maximum integer point | TBuffer | A one-dimensional [dynamic array][TArray] Byte | TCard | A [header line]({{ site.fits.standard }}#page=12): structure of an 80-character string | TClip | A polygon defined from 1 to 8 real points | TDesignPoint | A scene point for affine transformations | TDesignShift | Shift value for affine transformations | TEndianness | A platform [byte order](https://en.wikipedia.org/wiki/Endianness): big-endian or little-endian | [TFmtMeaCoord][TFmtMeaCoord] | The format of Right Ascension: degrees or hours | [TFmtRepCoord][TFmtRepCoord] | The text representation of Right Ascension and Declination: decimal or hexadecimal | TFmtShortDate | The short format of Date representation: `YY-MM-DD` or `DD-MM-YY` | [TFormatLine][TFormatLine] | The parameters of parse and compose lines of the header | TFrameBand | The tabular values of the mapping function: physical pixel value (amplitude) to color space value (palette) | THistogramBucket | Histogram item: physical value and frequency of the frame pixel | THistogramBuckets | Histogram data: array of THistogramBucket | THistogramIndexRange | The dynamic range of histogram data | TMatrix | A square matrix [3 x 3] of affine transformations in the system of homogeneous coordinates | TOrderType | HDU order in FITS container | TPaletteIndexs | The mapping a frame data (two-dimensional array of physical pixel values) in color space (palette indices) | TPaletteTuple | Palette item: RGB-value | TPaletteTuples | Palette data: array of TPaletteTuple | TPix | Coordinate (X, Y): an integer point on the plane | TPixmap | The mapping a frame data region in the palette space | TPnt | Coordinate (X, Y): a real point on the plane | TPntsClip | Array [1 .. 8] of real points | TPntsQuad | Array [1 .. 4] of real points | TQuad | Quadrilateral, the polygon defined from a 4 real points | TRegion | A rectangular region of the frame defined by the top-left integer point and integer width and height | TRepNumber | A [physical representation]({{ site.fits.standard }}#page=22) of data values: integer or floating-point numbers | TSliceDateTime | Part of TDateTime type: Date and Time, Date only or Time only | {: .thead-none } [TArray]: {% link pages/types/tarray.md %} [TBitPix]: {% link pages/types/tbitpix.md %} [TFmtMeaCoord]: {% link pages/types/tfmtmeacoord.md %} [TFmtRepCoord]: {% link pages/types/tfmtrepcoord.md %} [TFormatLine]: {% link pages/types/tformatline.md %} ",
    "url": "https://felleroff.github.io/delafits/pages/types",
    "relUrl": "/pages/types"
  }
}
